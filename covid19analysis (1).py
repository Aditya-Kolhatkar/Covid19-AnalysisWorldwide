# -*- coding: utf-8 -*-
"""Covid19Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s2SKJZ-DD6veDClsqcvH8jhe9qOabFfT

Topic: World Wide Covid-19 Analysis using Web Scarping


Created By: Aditya Ramesh Kolhatkar


Scraped Website: https://www.worldometers.info/coronavirus/countries-where-coronavirus-has-spread/
"""

pip install GeoPandas

pip install texttable

pip install pandas

pip install PrettyTable

# importing modules
import requests
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from prettytable import PrettyTable
from bs4 import BeautifulSoup
import texttable as tt
import geopandas as gpd

# URL for scrapping data
url = 'https://www.worldometers.info/coronavirus/countries-where-coronavirus-has-spread/'

# get URL html
page = requests.get(url)
soup = BeautifulSoup(page.text, 'html.parser')

data = []

# soup.find_all('td') will scrape every
# element in the url's table
data_iterator = iter(soup.find_all('td')) 

# data_iterator is the iterator of the table
# This loop will keep repeating till there is
# data available in the iterator
while True:
	try:
		country = next(data_iterator).text
		confirmed = next(data_iterator).text
		deaths = next(data_iterator).text
		continent = next(data_iterator).text

		# For 'confirmed' and 'deaths',
		# make sure to remove the commas 
		# and convert to int
		data.append((
			country,
			int(confirmed.replace(',', '')),
			int(deaths.replace(',', '')),
			continent
		))

	# StopIteration error is raised when
	# there are no more elements left to
	# iterate through
	except StopIteration:
		break

# Sort the data by the number of confirmed cases
data.sort(key = lambda row: row[1], reverse = True)
# create texttable object

table = tt.Texttable()

# Add an empty row at the beginning for the headers
table.add_rows([(None, None, None, None)] + data) 

# 'l' denotes left, 'c' denotes center,
# and 'r' denotes right
table.set_cols_align(('c', 'c', 'c', 'c')) 
table.header((' Country ', ' Number of cases ', ' Deaths ', ' Continent '))

print(table.draw())

# now convert the data into a pandas dataframe for further processing
new_cols = ["Countries", "Number of cases","Deaths","Continent",]
data_iterator = pd.DataFrame(data = data, columns = new_cols)

# converting the 'string' data to 'int'
data_iterator['Number of cases'] = data_iterator['Number of cases'].map(int)
data_iterator['Deaths'] = data_iterator['Deaths'].map(int)

# pretty table representation
table = PrettyTable()
table.field_names = (new_cols)
for i in data:
    table.add_row(i)
table.add_row(["","Total", 
               sum(data_iterator['Number of cases']), 
               sum(data_iterator['Deaths'])])
print(table)

# barplot to show total confirmed cases Statewise 
sns.set_style("ticks")
plt.figure(figsize = (15,7))
plt.barh(data_iterator["Deaths"], data_iterator["Number of cases"].map(int),
         align = 'center', color = 'lightblue', edgecolor = 'blue')
plt.xlabel('No. of Confirmed cases', fontsize = 18)
plt.ylabel('Deaths', fontsize = 18)
plt.gca().invert_yaxis() # this is to maintain the order in which the countries appear
plt.xticks(fontsize = 14) 
plt.yticks(fontsize = 14)
plt.title('Total Confirmed Cases CounytryWise', fontsize = 20)
for index, value in enumerate(data_iterator["Number of cases"]):
    plt.text(value, index, str(value), fontsize = 12, verticalalignment = 'center')
plt.show()

# donut chart representing nationwide total confirmed, cured and deceased cases
group_size = [sum(data_iterator['Number of cases']), 
              sum(data_iterator['Deaths']), 
              ]

group_labels = ['Number of cases\n' + str(sum(data_iterator['Number of cases'])), 
                'Deaths\n' + str(sum(data_iterator['Deaths']))]
custom_colors = ['skyblue','yellowgreen']

plt.figure(figsize = (5,5))
plt.pie(group_size, labels = group_labels, colors = custom_colors)
central_circle = plt.Circle((0,0), 0.5, color = 'white')
fig = plt.gcf()
fig.gca().add_artist(central_circle)
plt.rc('font', size = 12) 
plt.title('Worldwide total no of Confirmed cases, Number of Deaths', fontsize = 16)
plt.show()

